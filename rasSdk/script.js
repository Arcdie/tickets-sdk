const content = 'IAAAABwARAA8ADgAMAAoACAAGABAAAwAFAAQAAgABAAcAAAAxAAAAJQGAAA4AAAAXAAAAIAAAAByAQAAAAAAAPzfeMGJAQAApaCy+YgBAABSHEqahgEAAHQOAAAkEwAAEAcAACAAAABiZjcwZDZkYjkzMGIyMjE2MTg1Y2U5YTE2NzczODc1NAAAAAAgAAAANTI0MGZlZDYyNzkxMDVmZTFkZTE3ZjZhYmM4YWFjMmMAAAAAIAAAAGU1OWUwOTc5OGI1MmNlNzU0MDU2ODdiZDg2MTQ5NGNmAAAOABgABAAIAAwAEAAUAA4AAAAOAAAACAAAAOQDAADsAAAABAAAAA4AAADUAAAAxAAAALQAAACkAAAAlAAAAIQAAAB0AAAAZAAAAFQAAABEAAAANAAAACQAAAAUAAAABAAAAK76//8EAAAAAAAAALr6//8EAAAAAAAAAMb6//8EAAAAAAAAANL6//8EAAAAAAAAAN76//8EAAAAAAAAAOr6//8EAAAAAAAAAPb6//8EAAAAAAAAAAL7//8EAAAAAAAAAA77//8EAAAAAAAAABr7//8EAAAAAAAAACb7//8EAAAAAAAAADL7//8EAAAAAAAAAD77//8EAAAAAAAAAEr7//8EAAAAAAAAAA4AAAC0AgAAdAIAACQCAACkAQAAVAEAABQBAAAEAQAA9AAAAOQAAADUAAAAlAAAAFQAAAAUAAAABAAAAJL7//8EAAAAAAAAAJ77//8EAAAAAQAAAAQAAAB4+///HAAAAAQAAAABAAAABAAAAIz7//8BAAAALAEAAAQAAABPUEVOAAAAANr7//8EAAAAAQAAAAQAAAC0+///HAAAAAQAAAABAAAABAAAAMj7//8BAAAAzwEAAAQAAABPUEVOAAAAABb8//8EAAAAAQAAAAQAAADw+///HAAAAAQAAAABAAAABAAAAAT8//8BAAAAUgAAAAQAAABPUEVOAAAAAFL8//8EAAAAAAAAAF78//8EAAAAAAAAAGr8//8EAAAAAAAAAHb8//8EAAAAAAAAAIL8//8EAAAAAQAAAAQAAABc/P//HAAAAAQAAAABAAAABAAAAHD8//8AAAAASgAAAAQAAABPUEVOAAAAAL78//8EAAAAAQAAAAQAAACY/P//LAAAAAQAAAACAAAAFAAAAAQAAACw/P//EwAAAAQAAAC8/P//AAAAACwAAAAEAAAAT1BFTgAAAAAK/f//BAAAAAEAAAAEAAAA5Pz//1wAAAAEAAAABQAAADgAAAAcAAAADAAAADgAAAAcAAAACP3//w0AAAAIAAAAFP3//woAAAAKAAAAIP3//xMAAAAfAAAALP3//wAAAAACAAAAOP3//xAAAAAQAAAABAAAAE9QRU4AAAAAhv3//wQAAAABAAAABAAAAGD9//8sAAAABAAAAAIAAAAUAAAABAAAAHj9//8TAAAADAAAAIT9//8QAAAAAwAAAAQAAABPUEVOAAAAANL9//8EAAAAAQAAAAQAAACs/f//HAAAAAQAAAABAAAABAAAAMD9//8CAAAAAQAAAAQAAABPUEVOAAAAAA7+//8EAAAAAQAAAAQAAADo/f//HAAAAAQAAAABAAAABAAAAPz9//8CAAAAAQAAAAQAAABPUEVOAAAAAA4AAAC4AQAAiAEAAFwBAAAwAQAABAEAANgAAADIAAAAuAAAAKgAAACYAAAAbAAAAEAAAAAUAAAABAAAAIb+//8EAAAAAAAAAJL+//8EAAAAAQAAAAQAAABs/v//CAAAACwBAAAEAAAAT1BFTgAAAAC6/v//BAAAAAEAAAAEAAAAlP7//wgAAADPAQAABAAAAE9QRU4AAAAA4v7//wQAAAABAAAABAAAALz+//8IAAAAUgAAAAQAAABPUEVOAAAAAAr///8EAAAAAAAAABb///8EAAAAAAAAACL///8EAAAAAAAAAC7///8EAAAAAAAAADr///8EAAAAAQAAAAQAAAAU////CAAAAEoAAAAEAAAAT1BFTgAAAABi////BAAAAAEAAAAEAAAAPP///wgAAAAwAAAABAAAAE9QRU4AAAAAiv///wQAAAABAAAABAAAAGT///8IAAAAQwAAAAQAAABPUEVOAAAAALL///8EAAAAAQAAAAQAAACM////CAAAAA8AAAAEAAAAT1BFTgAAAADa////BAAAAAEAAAAEAAAAtP///wgAAAABAAAABAAAAE9QRU4AAAYACAAEAAYAAAAEAAAAAQAAAAQAAADg////CAAAAAEAAAAEAAAAT1BFTgAAAAABAAAADAAAAAgADAAEAAgACAAAAJQAAAAEAAAAhwAAADswAAABAADNAB8ANQAAAKUAAADUAAAA2QAAAOUAAAC4AQsAxgEHANUBAADdAQQAMAIJAEMCCQBmAgEAnAINAK8CEgDGAgMA/wIAAAgDAQAuAwIAMwMMAGQDFQCzAwAAywMAAOEDAAD0AwgADwQKAEAEBQBIBAsAWgQZAKAEAAClBAMAqwQCAAAEAAAAT1BFTgAAAAAQAAAAMEYwMDVFNUNENEZDMkY0NwAAAAA=';
const buffer = new Uint8Array(Buffer.from(content, 'base64'));

const readUint16 = (buffer, index) =>
  buffer[index] | (buffer[index + 1] << 8);

const readInt16 = (buffer, index) =>
  (readUint16(buffer, index) << 16) >> 16;

const readInt32 = (buffer, index) =>
  buffer[index] | (buffer[index + 1] << 8) | (buffer[index + 2] << 16) | (buffer[index + 3] << 24);

const offset = (buffer, position, offsetValue) => {
  const r = position - readInt32(buffer, position);
  return offsetValue < readInt16(buffer, r) ? readInt16(buffer, r + offsetValue) : 0;
};

const vector = (buffer, value) =>
  value + readInt32(buffer, value) + 4;

const vectorLen = (buffer, value) =>
  readInt32(buffer, value + readInt32(buffer, value));

const indirect = (buffer, value) =>
  value + readInt32(buffer, value);

const asTypedArray = (buffer, byteOffset, length) =>
  Uint8Array(t.wasmMemory.buffer, this.byteOffset, this.length);

// start

const statuses = (() => {
  let position = readInt32(buffer, 0);

  let o = offset(buffer, position, 24);
  const v = vector(buffer, position + o);
  const i = indirect(buffer, v + 4 * 0);

  position = i;

  o = offset(buffer, position, 6);
  
  const newBuffer = new Uint8Array(
    buffer.buffer,
    vector(buffer, position + o),
    vectorLen(buffer, position + o),
  );

  

  console.log('newBuffer', newBuffer);

  // newBuffer

  /*
  const bigBuffer = new Uint8Array(16777216);
  bigBuffer.set(newBuffer, 5247168);
  console.log('bigBuffer', bigBuffer);
  */

  // const byteOffset = 5247168; // 5247096, 5247520

  // console.log(newBuffer);
  // console.log('newBuffer', newBuffer);
})();


